#!/usr/bin/env python
# coding: utf-8

import sys
import os
import argparse
import webbrowser

from keeley import make_app, KEELEY_VERSION
from keeley.utils import force_unicode


def export_directory(path):
    path = os.path.abspath(path)
    if not os.path.isdir(path):
        raise argparse.ArgumentTypeError("%r: No such directory" % path)
    return path


def make_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--host", help="default: 127.0.0.1", default="127.0.0.1")
    parser.add_argument("--port", help="default: 8080", default=8080, type=int)
    parser.add_argument("--site-name", help="site name showed in header. default: your hostname")
    parser.add_argument("--version", help="print version number", action="store_true")
    parser.add_argument(
        "-b",
        "--browser",
        help="open keeley in a browser on server start",
        default=False,
        action="store_true",
    )
    parser.add_argument(
        "-B",
        "--with-browser",
        help="specify which browser to use with --browser",
        metavar="BROWSER",
        default=None,
    )
    parser.add_argument(
        "dir",
        help="directory to export",
        metavar="DIR",
        nargs="*",
        type=export_directory,
    )

    grp = parser.add_argument_group("Development flags", "DO NOT USE IN PRODUCTION!")
    grp.add_argument(
        "--debug", help="Enable Werkzeug debugger and reloader", action="store_true"
    )

    return parser


def main():
    args = make_parser().parse_args()

    if args.version:
        print(KEELEY_VERSION)
        return 0

    if not args.dir:
        print(
            "WARNING: No directory supplied -- syntax is 'keeley dir'.",
            file=sys.stderr,
        )

    if not args.site_name:
        args.site_name = "%s:%d" % (args.host, args.port)

    app = make_app(
        args.repos,
        force_unicode(args.site_name or args.host),
    )

    if args.browser:
        _open_browser(args)

    app.run(args.host, args.port, args.debug)


def _open_browser(args):
    # Open a web browser onto the server URL. Technically we're jumping the
    # gun a little here since the server is not yet running, but there's no
    # clean way to run a function after the server has started without
    # losing the simplicity of the code. In the Real World (TM) it'll take
    # longer for the browser to start than it will for us to start
    # serving, so we'll be OK.
    if args.with_browser is None:
        opener = webbrowser.open
    else:
        opener = webbrowser.get(args.with_browser).open
    opener("http://%s:%s" % (args.host, args.port))


if __name__ == "__main__":
    exit(main())
